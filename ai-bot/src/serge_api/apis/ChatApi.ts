/* tslint:disable */
/* eslint-disable */
/**
 * Serge API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
} from '../models';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models';

export interface AskAQuestionChatChatIdQuestionPostRequest {
    chatId: string;
    prompt: string;
}

export interface CreateNewChatChatPostRequest {
    model?: string;
    temperature?: number;
    topK?: number;
    topP?: number;
    maxLength?: number;
    contextWindow?: number;
    repeatLastN?: number;
    repeatPenalty?: number;
    initPrompt?: string;
    nThreads?: number;
}

export interface DeleteChatChatChatIdDeleteRequest {
    chatId: string;
}

export interface GetChatHistoryChatChatIdHistoryGetRequest {
    chatId: string;
}

export interface GetSpecificChatChatChatIdGetRequest {
    chatId: string;
}

export interface StreamAskAQuestionChatChatIdQuestionGetRequest {
    chatId: string;
    prompt: string;
}

/**
 *
 */
export class ChatApi extends runtime.BaseAPI {

    /**
     * Ask A Question
     */
    async askAQuestionChatChatIdQuestionPostRaw(requestParameters: AskAQuestionChatChatIdQuestionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.chatId === null || requestParameters.chatId === undefined) {
            throw new runtime.RequiredError('chatId','Required parameter requestParameters.chatId was null or undefined when calling askAQuestionChatChatIdQuestionPost.');
        }

        if (requestParameters.prompt === null || requestParameters.prompt === undefined) {
            throw new runtime.RequiredError('prompt','Required parameter requestParameters.prompt was null or undefined when calling askAQuestionChatChatIdQuestionPost.');
        }

        const queryParameters: any = {};

        if (requestParameters.prompt !== undefined) {
            queryParameters['prompt'] = requestParameters.prompt;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/chat/{chat_id}/question`.replace(`{${"chat_id"}}`, encodeURIComponent(String(requestParameters.chatId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Ask A Question
     */
    async askAQuestionChatChatIdQuestionPost(requestParameters: AskAQuestionChatChatIdQuestionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.askAQuestionChatChatIdQuestionPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create New Chat
     */
    async createNewChatChatPostRaw(requestParameters: CreateNewChatChatPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters.model !== undefined) {
            queryParameters['model'] = requestParameters.model;
        }

        if (requestParameters.temperature !== undefined) {
            queryParameters['temperature'] = requestParameters.temperature;
        }

        if (requestParameters.topK !== undefined) {
            queryParameters['top_k'] = requestParameters.topK;
        }

        if (requestParameters.topP !== undefined) {
            queryParameters['top_p'] = requestParameters.topP;
        }

        if (requestParameters.maxLength !== undefined) {
            queryParameters['max_length'] = requestParameters.maxLength;
        }

        if (requestParameters.contextWindow !== undefined) {
            queryParameters['context_window'] = requestParameters.contextWindow;
        }

        if (requestParameters.repeatLastN !== undefined) {
            queryParameters['repeat_last_n'] = requestParameters.repeatLastN;
        }

        if (requestParameters.repeatPenalty !== undefined) {
            queryParameters['repeat_penalty'] = requestParameters.repeatPenalty;
        }

        if (requestParameters.initPrompt !== undefined) {
            queryParameters['init_prompt'] = requestParameters.initPrompt;
        }

        if (requestParameters.nThreads !== undefined) {
            queryParameters['n_threads'] = requestParameters.nThreads;
        }

        const headerParameters: runtime.HTTPHeaders = {accept: 'application/json', 'content-type' : 'application/x-www-form-urlencoded'};

        const response = await this.request({
            path: `/chat/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Create New Chat
     */
    async createNewChatChatPost(requestParameters: CreateNewChatChatPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.createNewChatChatPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Chat
     */
    async deleteChatChatChatIdDeleteRaw(requestParameters: DeleteChatChatChatIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.chatId === null || requestParameters.chatId === undefined) {
            throw new runtime.RequiredError('chatId','Required parameter requestParameters.chatId was null or undefined when calling deleteChatChatChatIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/chat/{chat_id}`.replace(`{${"chat_id"}}`, encodeURIComponent(String(requestParameters.chatId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete Chat
     */
    async deleteChatChatChatIdDelete(requestParameters: DeleteChatChatChatIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deleteChatChatChatIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get All Chats
     */
    async getAllChatsChatGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/chat/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get All Chats
     */
    async getAllChatsChatGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getAllChatsChatGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Chat History
     */
    async getChatHistoryChatChatIdHistoryGetRaw(requestParameters: GetChatHistoryChatChatIdHistoryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.chatId === null || requestParameters.chatId === undefined) {
            throw new runtime.RequiredError('chatId','Required parameter requestParameters.chatId was null or undefined when calling getChatHistoryChatChatIdHistoryGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/chat/{chat_id}/history`.replace(`{${"chat_id"}}`, encodeURIComponent(String(requestParameters.chatId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get Chat History
     */
    async getChatHistoryChatChatIdHistoryGet(requestParameters: GetChatHistoryChatChatIdHistoryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getChatHistoryChatChatIdHistoryGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Specific Chat
     */
    async getSpecificChatChatChatIdGetRaw(requestParameters: GetSpecificChatChatChatIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.chatId === null || requestParameters.chatId === undefined) {
            throw new runtime.RequiredError('chatId','Required parameter requestParameters.chatId was null or undefined when calling getSpecificChatChatChatIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/chat/{chat_id}`.replace(`{${"chat_id"}}`, encodeURIComponent(String(requestParameters.chatId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get Specific Chat
     */
    async getSpecificChatChatChatIdGet(requestParameters: GetSpecificChatChatChatIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getSpecificChatChatChatIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Stream Ask A Question
     */
    async streamAskAQuestionChatChatIdQuestionGetRaw(requestParameters: StreamAskAQuestionChatChatIdQuestionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.chatId === null || requestParameters.chatId === undefined) {
            throw new runtime.RequiredError('chatId','Required parameter requestParameters.chatId was null or undefined when calling streamAskAQuestionChatChatIdQuestionGet.');
        }

        if (requestParameters.prompt === null || requestParameters.prompt === undefined) {
            throw new runtime.RequiredError('prompt','Required parameter requestParameters.prompt was null or undefined when calling streamAskAQuestionChatChatIdQuestionGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.prompt !== undefined) {
            queryParameters['prompt'] = requestParameters.prompt;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/chat/{chat_id}/question`.replace(`{${"chat_id"}}`, encodeURIComponent(String(requestParameters.chatId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Stream Ask A Question
     */
    async streamAskAQuestionChatChatIdQuestionGet(requestParameters: StreamAskAQuestionChatChatIdQuestionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.streamAskAQuestionChatChatIdQuestionGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
