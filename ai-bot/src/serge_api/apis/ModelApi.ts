/* tslint:disable */
/* eslint-disable */
/**
 * Serge API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
} from '../models';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models';

export interface DeleteModelModelModelNameDeleteRequest {
    modelName: string;
}

export interface DownloadModelModelModelNameDownloadPostRequest {
    modelName: string;
}

export interface DownloadStatusModelModelNameDownloadStatusGetRequest {
    modelName: string;
}

/**
 * 
 */
export class ModelApi extends runtime.BaseAPI {

    /**
     * Delete Model
     */
    async deleteModelModelModelNameDeleteRaw(requestParameters: DeleteModelModelModelNameDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.modelName === null || requestParameters.modelName === undefined) {
            throw new runtime.RequiredError('modelName','Required parameter requestParameters.modelName was null or undefined when calling deleteModelModelModelNameDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/model/{model_name}`.replace(`{${"model_name"}}`, encodeURIComponent(String(requestParameters.modelName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete Model
     */
    async deleteModelModelModelNameDelete(requestParameters: DeleteModelModelModelNameDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deleteModelModelModelNameDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Download Model
     */
    async downloadModelModelModelNameDownloadPostRaw(requestParameters: DownloadModelModelModelNameDownloadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.modelName === null || requestParameters.modelName === undefined) {
            throw new runtime.RequiredError('modelName','Required parameter requestParameters.modelName was null or undefined when calling downloadModelModelModelNameDownloadPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/model/{model_name}/download`.replace(`{${"model_name"}}`, encodeURIComponent(String(requestParameters.modelName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Download Model
     */
    async downloadModelModelModelNameDownloadPost(requestParameters: DownloadModelModelModelNameDownloadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.downloadModelModelModelNameDownloadPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Download Status
     */
    async downloadStatusModelModelNameDownloadStatusGetRaw(requestParameters: DownloadStatusModelModelNameDownloadStatusGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.modelName === null || requestParameters.modelName === undefined) {
            throw new runtime.RequiredError('modelName','Required parameter requestParameters.modelName was null or undefined when calling downloadStatusModelModelNameDownloadStatusGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/model/{model_name}/download/status`.replace(`{${"model_name"}}`, encodeURIComponent(String(requestParameters.modelName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Download Status
     */
    async downloadStatusModelModelNameDownloadStatusGet(requestParameters: DownloadStatusModelModelNameDownloadStatusGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.downloadStatusModelModelNameDownloadStatusGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Of All Models
     */
    async listOfAllModelsModelAllGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/model/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * List Of All Models
     */
    async listOfAllModelsModelAllGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.listOfAllModelsModelAllGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * List Of Downloadable Models
     */
    async listOfDownloadableModelsModelDownloadableGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/model/downloadable`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * List Of Downloadable Models
     */
    async listOfDownloadableModelsModelDownloadableGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.listOfDownloadableModelsModelDownloadableGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * List Of Installed Models
     */
    async listOfInstalledModelsModelInstalledGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/model/installed`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * List Of Installed Models
     */
    async listOfInstalledModelsModelInstalledGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.listOfInstalledModelsModelInstalledGetRaw(initOverrides);
        return await response.value();
    }

}
